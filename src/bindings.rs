/* automatically generated by rust-bindgen 0.72.0 */

#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
pub const DEVICE_AES_CBC_IV: &[u8; 17] = b"1234567890123456\0";
pub const SYNCHRONIZER_TIMEOUT: u32 = 5;
pub const SYNCHRONIZER_CONNECT_TIMEOUT: u32 = 10;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const __GLIBC_USE_ISOC2Y: u32 = 0;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 41;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const __HAVE_FLOAT128: u32 = 1;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 1;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const pocket_stat_t_READY: pocket_stat_t = 0;
pub const pocket_stat_t_BUSY: pocket_stat_t = 1;
pub const pocket_stat_t_USER_NOT_FOUND: pocket_stat_t = 600;
pub const pocket_stat_t_WRONG_SIZE_TOKEN: pocket_stat_t = 601;
pub const pocket_stat_t_DEVICE_ID_NOT_MATCH: pocket_stat_t = 602;
pub const pocket_stat_t_DEVICE_NOT_FOUND: pocket_stat_t = 603;
pub const pocket_stat_t_SECRET_NOT_MATCH: pocket_stat_t = 604;
pub const pocket_stat_t_PASSWD_ERROR: pocket_stat_t = 605;
pub const pocket_stat_t_TIMESTAMP_LAST_UPDATE_NOT_MATCH: pocket_stat_t = 606;
pub const pocket_stat_t_CACHE_NOT_FOND: pocket_stat_t = 607;
pub const pocket_stat_t_SECRET_EMPTY: pocket_stat_t = 608;
pub const pocket_stat_t_TIMESTAMP_LAST_NOT_PARSABLE: pocket_stat_t = 609;
pub const pocket_stat_t_ERROR: pocket_stat_t = 700;
pub const pocket_stat_t_JSON_PARSING_ERROR: pocket_stat_t = 701;
pub const pocket_stat_t_DB_GROUP_ERROR: pocket_stat_t = 702;
pub const pocket_stat_t_DB_GROUP_FIELD_ERROR: pocket_stat_t = 703;
pub const pocket_stat_t_DB_FIELD_ERROR: pocket_stat_t = 704;
pub const pocket_stat_t_DB_GENERIC_ERROR: pocket_stat_t = 705;
pub const pocket_stat_t_NO_NETWORK: pocket_stat_t = 706;
pub const pocket_stat_t_MAP_ID_ERROR: pocket_stat_t = 707;
pub const pocket_stat_t_LOCAL_DEVICE_ID_NOT_MATCH: pocket_stat_t = 802;
pub const pocket_stat_t_OK: pocket_stat_t = 200;
pub type pocket_stat_t = ::std::os::raw::c_uint;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pocket_field_t {
    pub id: i64,
    pub server_id: i64,
    pub user_id: i64,
    pub group_id: i64,
    pub server_group_id: i64,
    pub group_field_id: i64,
    pub server_group_field_id: i64,
    pub title: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
    pub is_hidden: bool,
    pub synchronized: bool,
    pub deleted: bool,
    pub timestamp_creation: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pocket_field_t"][::std::mem::size_of::<pocket_field_t>() - 88usize];
    ["Alignment of pocket_field_t"][::std::mem::align_of::<pocket_field_t>() - 8usize];
    ["Offset of field: pocket_field_t::id"][::std::mem::offset_of!(pocket_field_t, id) - 0usize];
    ["Offset of field: pocket_field_t::server_id"]
        [::std::mem::offset_of!(pocket_field_t, server_id) - 8usize];
    ["Offset of field: pocket_field_t::user_id"]
        [::std::mem::offset_of!(pocket_field_t, user_id) - 16usize];
    ["Offset of field: pocket_field_t::group_id"]
        [::std::mem::offset_of!(pocket_field_t, group_id) - 24usize];
    ["Offset of field: pocket_field_t::server_group_id"]
        [::std::mem::offset_of!(pocket_field_t, server_group_id) - 32usize];
    ["Offset of field: pocket_field_t::group_field_id"]
        [::std::mem::offset_of!(pocket_field_t, group_field_id) - 40usize];
    ["Offset of field: pocket_field_t::server_group_field_id"]
        [::std::mem::offset_of!(pocket_field_t, server_group_field_id) - 48usize];
    ["Offset of field: pocket_field_t::title"]
        [::std::mem::offset_of!(pocket_field_t, title) - 56usize];
    ["Offset of field: pocket_field_t::value"]
        [::std::mem::offset_of!(pocket_field_t, value) - 64usize];
    ["Offset of field: pocket_field_t::is_hidden"]
        [::std::mem::offset_of!(pocket_field_t, is_hidden) - 72usize];
    ["Offset of field: pocket_field_t::synchronized"]
        [::std::mem::offset_of!(pocket_field_t, synchronized) - 73usize];
    ["Offset of field: pocket_field_t::deleted"]
        [::std::mem::offset_of!(pocket_field_t, deleted) - 74usize];
    ["Offset of field: pocket_field_t::timestamp_creation"]
        [::std::mem::offset_of!(pocket_field_t, timestamp_creation) - 80usize];
};
unsafe extern "C" {
    pub fn pocket_field_new() -> *mut pocket_field_t;
}
unsafe extern "C" {
    pub fn pocket_field_new_with_params(
        id: i64,
        server_id: i64,
        user_id: i64,
        group_id: i64,
        server_group_id: i64,
        group_field_id: i64,
        server_group_field_id: i64,
        title: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        is_hidden: bool,
        synchronized: bool,
        deleted: bool,
        timestamp_creation: u64,
    ) -> *mut pocket_field_t;
}
unsafe extern "C" {
    pub fn pocket_field_is_null(field: *const pocket_field_t) -> bool;
}
unsafe extern "C" {
    pub fn pocket_field_free(field: *mut pocket_field_t);
}
pub type wchar_t = ::std::os::raw::c_int;
pub type __cfloat128 = __BindgenComplex<u128>;
pub type _Float128 = u128;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
unsafe extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
unsafe extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
unsafe extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
unsafe extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
unsafe extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pocket_t {
    pub session: *mut ::std::os::raw::c_void,
    pub user: *mut ::std::os::raw::c_void,
    pub aes: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pocket_t"][::std::mem::size_of::<pocket_t>() - 24usize];
    ["Alignment of pocket_t"][::std::mem::align_of::<pocket_t>() - 8usize];
    ["Offset of field: pocket_t::session"][::std::mem::offset_of!(pocket_t, session) - 0usize];
    ["Offset of field: pocket_t::user"][::std::mem::offset_of!(pocket_t, user) - 8usize];
    ["Offset of field: pocket_t::aes"][::std::mem::offset_of!(pocket_t, aes) - 16usize];
};
unsafe extern "C" {
    pub fn pocket_new() -> *mut pocket_t;
}
unsafe extern "C" {
    pub fn pocket_free(pocket: *mut pocket_t);
}
unsafe extern "C" {
    pub fn pocket_initialize_aes(
        self_: *mut pocket_t,
        passwd: *const ::std::os::raw::c_char,
    ) -> bool;
}
unsafe extern "C" {
    pub fn pocket_initialize(
        self_: *mut pocket_t,
        base_path: *const ::std::os::raw::c_char,
        config_json: *const ::std::os::raw::c_char,
        encrypted: bool,
        passwd: *const ::std::os::raw::c_char,
    ) -> bool;
}
unsafe extern "C" {
    pub fn pocket_login(
        self_: *mut pocket_t,
        email: *const ::std::os::raw::c_char,
        passwd: *const ::std::os::raw::c_char,
    ) -> pocket_stat_t;
}
unsafe extern "C" {
    pub fn pocket_logout(self_: *mut pocket_t, soft_logout: bool) -> pocket_stat_t;
}
unsafe extern "C" {
    pub fn pocket_change_passwd(
        self_: *mut pocket_t,
        full_path_file: *const ::std::os::raw::c_char,
        new_passwd: *const ::std::os::raw::c_char,
    ) -> pocket_stat_t;
}
unsafe extern "C" {
    pub fn pocket_copy_group(
        self_: *mut pocket_t,
        group_id_src: i64,
        group_id_dst: i64,
        move_: bool,
    ) -> bool;
}
unsafe extern "C" {
    pub fn pocket_copy_field(
        self_: *mut pocket_t,
        field_id_src: i64,
        group_id_dst: i64,
        move_: bool,
    ) -> bool;
}
unsafe extern "C" {
    pub fn pocket_send_data(self_: *mut pocket_t) -> pocket_stat_t;
}
unsafe extern "C" {
    pub fn pocket_aes_decrypt(
        self_: *mut pocket_t,
        encrypted: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn pocket_aes_encrypt(
        self_: *mut pocket_t,
        plain: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn pocket_sha512_encrypt(
        str_: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pocket_field_controller_t {
    pub pocket: *mut pocket_t,
    pub reachability: bool,
    pub view_field: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pocket_field_controller_t"]
        [::std::mem::size_of::<pocket_field_controller_t>() - 24usize];
    ["Alignment of pocket_field_controller_t"]
        [::std::mem::align_of::<pocket_field_controller_t>() - 8usize];
    ["Offset of field: pocket_field_controller_t::pocket"]
        [::std::mem::offset_of!(pocket_field_controller_t, pocket) - 0usize];
    ["Offset of field: pocket_field_controller_t::reachability"]
        [::std::mem::offset_of!(pocket_field_controller_t, reachability) - 8usize];
    ["Offset of field: pocket_field_controller_t::view_field"]
        [::std::mem::offset_of!(pocket_field_controller_t, view_field) - 16usize];
};
unsafe extern "C" {
    pub fn pocket_field_controller_new(pocket: *mut pocket_t) -> *mut pocket_field_controller_t;
}
unsafe extern "C" {
    pub fn pocket_field_controller_free(self_: *const pocket_field_controller_t);
}
unsafe extern "C" {
    pub fn pocket_field_controller_init(self_: *mut pocket_field_controller_t);
}
unsafe extern "C" {
    pub fn pocket_field_controller_get_list(
        self_: *const pocket_field_controller_t,
        group_id: i64,
        search: *const ::std::os::raw::c_char,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut *mut pocket_field_t;
}
unsafe extern "C" {
    pub fn pocket_field_controller_free_list(
        list: *mut *mut pocket_field_t,
        count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn pocket_field_controller_persist(
        self_: *const pocket_field_controller_t,
        field: *mut pocket_field_t,
    ) -> pocket_stat_t;
}
unsafe extern "C" {
    pub fn pocket_field_controller_del(
        self_: *const pocket_field_controller_t,
        field: *const pocket_field_t,
    ) -> pocket_stat_t;
}
unsafe extern "C" {
    pub fn pocket_field_controller_get(
        self_: *const pocket_field_controller_t,
        group_id: i64,
    ) -> *mut pocket_field_t;
}
unsafe extern "C" {
    pub fn pocket_field_controller_count_child(
        self_: *const pocket_field_controller_t,
        field: *const pocket_group_t,
    ) -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pocket_group_t {
    pub id: i64,
    pub server_id: i64,
    pub user_id: i64,
    pub group_id: i64,
    pub server_group_id: i64,
    pub title: *mut ::std::os::raw::c_char,
    pub icon: *mut ::std::os::raw::c_char,
    pub note: *mut ::std::os::raw::c_char,
    pub synchronized: bool,
    pub deleted: bool,
    pub timestamp_creation: u64,
    pub has_child: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pocket_group_t"][::std::mem::size_of::<pocket_group_t>() - 88usize];
    ["Alignment of pocket_group_t"][::std::mem::align_of::<pocket_group_t>() - 8usize];
    ["Offset of field: pocket_group_t::id"][::std::mem::offset_of!(pocket_group_t, id) - 0usize];
    ["Offset of field: pocket_group_t::server_id"]
        [::std::mem::offset_of!(pocket_group_t, server_id) - 8usize];
    ["Offset of field: pocket_group_t::user_id"]
        [::std::mem::offset_of!(pocket_group_t, user_id) - 16usize];
    ["Offset of field: pocket_group_t::group_id"]
        [::std::mem::offset_of!(pocket_group_t, group_id) - 24usize];
    ["Offset of field: pocket_group_t::server_group_id"]
        [::std::mem::offset_of!(pocket_group_t, server_group_id) - 32usize];
    ["Offset of field: pocket_group_t::title"]
        [::std::mem::offset_of!(pocket_group_t, title) - 40usize];
    ["Offset of field: pocket_group_t::icon"]
        [::std::mem::offset_of!(pocket_group_t, icon) - 48usize];
    ["Offset of field: pocket_group_t::note"]
        [::std::mem::offset_of!(pocket_group_t, note) - 56usize];
    ["Offset of field: pocket_group_t::synchronized"]
        [::std::mem::offset_of!(pocket_group_t, synchronized) - 64usize];
    ["Offset of field: pocket_group_t::deleted"]
        [::std::mem::offset_of!(pocket_group_t, deleted) - 65usize];
    ["Offset of field: pocket_group_t::timestamp_creation"]
        [::std::mem::offset_of!(pocket_group_t, timestamp_creation) - 72usize];
    ["Offset of field: pocket_group_t::has_child"]
        [::std::mem::offset_of!(pocket_group_t, has_child) - 80usize];
};
unsafe extern "C" {
    pub fn pocket_group_new() -> *mut pocket_group_t;
}
unsafe extern "C" {
    pub fn pocket_group_new_with_params(
        id: i64,
        server_id: i64,
        user_id: i64,
        group_id: i64,
        server_group_id: i64,
        title: *const ::std::os::raw::c_char,
        icon: *const ::std::os::raw::c_char,
        note: *const ::std::os::raw::c_char,
        synchronized: bool,
        deleted: bool,
        timestamp_creation: u64,
        has_child: bool,
    ) -> *mut pocket_group_t;
}
unsafe extern "C" {
    pub fn pocket_group_free(group: *mut pocket_group_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pocket_group_controller_t {
    pub pocket: *mut pocket_t,
    pub reachability: bool,
    pub view_group: *mut ::std::os::raw::c_void,
    pub view_group_field: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pocket_group_controller_t"]
        [::std::mem::size_of::<pocket_group_controller_t>() - 32usize];
    ["Alignment of pocket_group_controller_t"]
        [::std::mem::align_of::<pocket_group_controller_t>() - 8usize];
    ["Offset of field: pocket_group_controller_t::pocket"]
        [::std::mem::offset_of!(pocket_group_controller_t, pocket) - 0usize];
    ["Offset of field: pocket_group_controller_t::reachability"]
        [::std::mem::offset_of!(pocket_group_controller_t, reachability) - 8usize];
    ["Offset of field: pocket_group_controller_t::view_group"]
        [::std::mem::offset_of!(pocket_group_controller_t, view_group) - 16usize];
    ["Offset of field: pocket_group_controller_t::view_group_field"]
        [::std::mem::offset_of!(pocket_group_controller_t, view_group_field) - 24usize];
};
unsafe extern "C" {
    pub fn pocket_group_controller_new(pocket: *mut pocket_t) -> *mut pocket_group_controller_t;
}
unsafe extern "C" {
    pub fn pocket_group_controller_free(self_: *const pocket_group_controller_t);
}
unsafe extern "C" {
    pub fn pocket_group_controller_init(self_: *mut pocket_group_controller_t);
}
unsafe extern "C" {
    pub fn pocket_group_controller_get_list(
        self_: *const pocket_group_controller_t,
        field_controller: *const pocket_field_controller_t,
        group_id: i64,
        search: *const ::std::os::raw::c_char,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut *mut pocket_group_t;
}
unsafe extern "C" {
    pub fn pocket_group_controller_free_list(
        list: *mut *mut pocket_group_t,
        count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn pocket_group_controller_count_child(
        self_: *const pocket_group_controller_t,
        group: *const pocket_group_t,
    ) -> i32;
}
unsafe extern "C" {
    pub fn pocket_group_controller_del(
        self_: *const pocket_group_controller_t,
        group_field_controller: *const pocket_group_field_controller_t,
        field_controller: *const pocket_field_controller_t,
        group: *const pocket_group_t,
    ) -> pocket_stat_t;
}
unsafe extern "C" {
    pub fn pocket_group_controller_persist(
        self_: *const pocket_group_controller_t,
        group: *mut pocket_group_t,
    ) -> pocket_stat_t;
}
unsafe extern "C" {
    pub fn pocket_group_controller_get(
        self_: *const pocket_group_controller_t,
        group_id: i64,
    ) -> *mut pocket_group_t;
}
unsafe extern "C" {
    pub fn pocket_group_controller_data_export(
        full_path_file_export: *const ::std::os::raw::c_char,
    ) -> bool;
}
unsafe extern "C" {
    pub fn pocket_group_controller_data_import(
        full_path_file_import: *const ::std::os::raw::c_char,
    ) -> bool;
}
unsafe extern "C" {
    pub fn pocket_group_controller_data_import_legacy(
        full_path_file_import: *const ::std::os::raw::c_char,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pocket_group_field_t {
    pub new_insertion: bool,
    pub id: i64,
    pub server_id: i64,
    pub user_id: i64,
    pub group_id: i64,
    pub server_group_id: i64,
    pub title: *mut ::std::os::raw::c_char,
    pub is_hidden: bool,
    pub synchronized: bool,
    pub deleted: bool,
    pub timestamp_creation: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pocket_group_field_t"][::std::mem::size_of::<pocket_group_field_t>() - 72usize];
    ["Alignment of pocket_group_field_t"][::std::mem::align_of::<pocket_group_field_t>() - 8usize];
    ["Offset of field: pocket_group_field_t::new_insertion"]
        [::std::mem::offset_of!(pocket_group_field_t, new_insertion) - 0usize];
    ["Offset of field: pocket_group_field_t::id"]
        [::std::mem::offset_of!(pocket_group_field_t, id) - 8usize];
    ["Offset of field: pocket_group_field_t::server_id"]
        [::std::mem::offset_of!(pocket_group_field_t, server_id) - 16usize];
    ["Offset of field: pocket_group_field_t::user_id"]
        [::std::mem::offset_of!(pocket_group_field_t, user_id) - 24usize];
    ["Offset of field: pocket_group_field_t::group_id"]
        [::std::mem::offset_of!(pocket_group_field_t, group_id) - 32usize];
    ["Offset of field: pocket_group_field_t::server_group_id"]
        [::std::mem::offset_of!(pocket_group_field_t, server_group_id) - 40usize];
    ["Offset of field: pocket_group_field_t::title"]
        [::std::mem::offset_of!(pocket_group_field_t, title) - 48usize];
    ["Offset of field: pocket_group_field_t::is_hidden"]
        [::std::mem::offset_of!(pocket_group_field_t, is_hidden) - 56usize];
    ["Offset of field: pocket_group_field_t::synchronized"]
        [::std::mem::offset_of!(pocket_group_field_t, synchronized) - 57usize];
    ["Offset of field: pocket_group_field_t::deleted"]
        [::std::mem::offset_of!(pocket_group_field_t, deleted) - 58usize];
    ["Offset of field: pocket_group_field_t::timestamp_creation"]
        [::std::mem::offset_of!(pocket_group_field_t, timestamp_creation) - 64usize];
};
unsafe extern "C" {
    pub fn pocket_group_field_new() -> *mut pocket_group_field_t;
}
unsafe extern "C" {
    pub fn pocket_group_field_new_with_params(
        id: i64,
        server_id: i64,
        user_id: i64,
        group_id: i64,
        server_group_id: i64,
        title: *const ::std::os::raw::c_char,
        is_hidden: bool,
        synchronized: bool,
        deleted: bool,
        timestamp_creation: u64,
    ) -> *mut pocket_group_field_t;
}
unsafe extern "C" {
    pub fn pocket_group_field_free(group_field: *mut pocket_group_field_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pocket_group_field_controller_t {
    pub pocket: *mut pocket_t,
    pub reachability: bool,
    pub view_group_field: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pocket_group_field_controller_t"]
        [::std::mem::size_of::<pocket_group_field_controller_t>() - 24usize];
    ["Alignment of pocket_group_field_controller_t"]
        [::std::mem::align_of::<pocket_group_field_controller_t>() - 8usize];
    ["Offset of field: pocket_group_field_controller_t::pocket"]
        [::std::mem::offset_of!(pocket_group_field_controller_t, pocket) - 0usize];
    ["Offset of field: pocket_group_field_controller_t::reachability"]
        [::std::mem::offset_of!(pocket_group_field_controller_t, reachability) - 8usize];
    ["Offset of field: pocket_group_field_controller_t::view_group_field"]
        [::std::mem::offset_of!(pocket_group_field_controller_t, view_group_field) - 16usize];
};
unsafe extern "C" {
    pub fn pocket_group_field_controller_new(
        pocket: *mut pocket_t,
    ) -> *mut pocket_group_field_controller_t;
}
unsafe extern "C" {
    pub fn pocket_group_field_controller_free(self_: *const pocket_group_field_controller_t);
}
unsafe extern "C" {
    pub fn pocket_group_field_controller_init(self_: *mut pocket_group_field_controller_t);
}
unsafe extern "C" {
    pub fn pocket_group_field_controller_get_list(
        self_: *const pocket_group_field_controller_t,
        group_id: i64,
        search: *const ::std::os::raw::c_char,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut *mut pocket_group_field_t;
}
unsafe extern "C" {
    pub fn pocket_group_field_controller_free_list(
        list: *mut *mut pocket_group_field_t,
        count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn pocket_group_field_controller_del(
        self_: *const pocket_group_field_controller_t,
        group_field: *const pocket_group_field_t,
    ) -> pocket_stat_t;
}
unsafe extern "C" {
    pub fn pocket_group_field_controller_persist(
        self_: *const pocket_group_field_controller_t,
        group_field: *mut pocket_group_field_t,
    ) -> pocket_stat_t;
}
pub const user_stat_t_USER_STAT_NOT_ACTIVE: user_stat_t = 1;
pub const user_stat_t_USER_STAT_ACTIVE: user_stat_t = 0;
pub const user_stat_t_USER_STAT_DELETED: user_stat_t = 2;
pub const user_stat_t_USER_STAT_INVALIDATED: user_stat_t = 3;
pub type user_stat_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pocket_user_t {
    pub id: i64,
    pub email: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub passwd: *mut ::std::os::raw::c_char,
    pub status: user_stat_t,
    pub timestamp_last_update: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pocket_user_t"][::std::mem::size_of::<pocket_user_t>() - 48usize];
    ["Alignment of pocket_user_t"][::std::mem::align_of::<pocket_user_t>() - 8usize];
    ["Offset of field: pocket_user_t::id"][::std::mem::offset_of!(pocket_user_t, id) - 0usize];
    ["Offset of field: pocket_user_t::email"]
        [::std::mem::offset_of!(pocket_user_t, email) - 8usize];
    ["Offset of field: pocket_user_t::name"][::std::mem::offset_of!(pocket_user_t, name) - 16usize];
    ["Offset of field: pocket_user_t::passwd"]
        [::std::mem::offset_of!(pocket_user_t, passwd) - 24usize];
    ["Offset of field: pocket_user_t::status"]
        [::std::mem::offset_of!(pocket_user_t, status) - 32usize];
    ["Offset of field: pocket_user_t::timestamp_last_update"]
        [::std::mem::offset_of!(pocket_user_t, timestamp_last_update) - 40usize];
};
unsafe extern "C" {
    pub fn pocket_user_init() -> *mut pocket_user_t;
}
unsafe extern "C" {
    pub fn pocket_user_init_with_params(
        id: i64,
        email: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        passwd: *const ::std::os::raw::c_char,
        timestamp_last_update: i64,
        status: user_stat_t,
    ) -> *mut pocket_user_t;
}
unsafe extern "C" {
    pub fn pocket_user_free(user: *mut pocket_user_t);
}
